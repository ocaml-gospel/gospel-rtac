(* This file is generated by ortac qcheck-stm,
   edit how you run the tool instead *)
[@@@ocaml.warning "-26-27-69-32-38"]
open Hashtbl
module Ortac_runtime = Ortac_runtime_qcheck_stm
let rec remove_first x xs_1 =
  try
    match xs_1 with
    | (a_1, b_1)::xs ->
        if a_1 = x then xs else (a_1, b_1) :: (remove_first x xs)
    | [] -> []
  with
  | e ->
      raise
        (Ortac_runtime.Partial_function
           (e,
             {
               Ortac_runtime.start =
                 {
                   pos_fname = "hashtbl.mli";
                   pos_lnum = 49;
                   pos_bol = 2390;
                   pos_cnum = 2396
                 };
               Ortac_runtime.stop =
                 {
                   pos_fname = "hashtbl.mli";
                   pos_lnum = 51;
                   pos_bol = 2486;
                   pos_cnum = 2502
                 }
             }))
module SUT =
  (Ortac_runtime.SUT.Make)(struct
                             type sut = (char, int) t
                             let init () = create ~random:false 16
                           end)
module ModelElt =
  struct
    type nonrec elt = {
      contents: (char * int) list }
    let init =
      let random = false
      and size = 16 in
      {
        contents =
          (try []
           with
           | e ->
               raise
                 (Ortac_runtime.Partial_function
                    (e,
                      {
                        Ortac_runtime.start =
                          {
                            pos_fname = "hashtbl.mli";
                            pos_lnum = 7;
                            pos_bol = 318;
                            pos_cnum = 343
                          };
                        Ortac_runtime.stop =
                          {
                            pos_fname = "hashtbl.mli";
                            pos_lnum = 7;
                            pos_bol = 318;
                            pos_cnum = 345
                          }
                      })))
      }
  end
module Model = (Ortac_runtime.Model.Make)(ModelElt)
module Spec =
  struct
    open STM
    type _ ty +=  
      | Integer: Ortac_runtime.integer ty 
    let integer = (Integer, Ortac_runtime.string_of_integer)
    type _ ty +=  
      | SUT: SUT.elt ty 
    let sut = (SUT, (fun _ -> "<sut>"))
    type sut = SUT.t
    let init_sut = SUT.create 1
    type state = Model.t
    let init_state = Model.create 1 ()
    type cmd =
      | Create of bool * int 
      | Clear 
      | Reset 
      | Copy 
      | Add of char * int 
      | Find of char 
      | Find_opt of char 
      | Find_all of char 
      | Mem of char 
      | Remove of char 
      | Replace of char * int 
      | Length 
    let show_cmd cmd__001_ =
      match cmd__001_ with
      | Create (random, size) ->
          Format.asprintf "%s %a %a" "create" (Util.Pp.pp_bool true) random
            (Util.Pp.pp_int true) size
      | Clear -> Format.asprintf "%s <sut>" "clear"
      | Reset -> Format.asprintf "%s <sut>" "reset"
      | Copy -> Format.asprintf "%s <sut>" "copy"
      | Add (a_2, b_2) ->
          Format.asprintf "%s <sut> %a %a" "add" (Util.Pp.pp_char true) a_2
            (Util.Pp.pp_int true) b_2
      | Find a_3 ->
          Format.asprintf "protect (fun () -> %s <sut> %a)" "find"
            (Util.Pp.pp_char true) a_3
      | Find_opt a_4 ->
          Format.asprintf "%s <sut> %a" "find_opt" (Util.Pp.pp_char true) a_4
      | Find_all a_5 ->
          Format.asprintf "%s <sut> %a" "find_all" (Util.Pp.pp_char true) a_5
      | Mem a_6 ->
          Format.asprintf "%s <sut> %a" "mem" (Util.Pp.pp_char true) a_6
      | Remove a_7 ->
          Format.asprintf "%s <sut> %a" "remove" (Util.Pp.pp_char true) a_7
      | Replace (a_8, b_3) ->
          Format.asprintf "%s <sut> %a %a" "replace" (Util.Pp.pp_char true)
            a_8 (Util.Pp.pp_int true) b_3
      | Length -> Format.asprintf "%s <sut>" "length"
    let shrink_cmd cmd__002_ =
      let open QCheck in
        let open Shrink in
          let open Iter in
            match cmd__002_ with
            | Create (random, size) ->
                (map (fun random -> Create (random, size)) (nil random)) <+>
                  (map (fun size -> Create (random, size)) (int size))
            | Clear -> empty
            | Reset -> empty
            | Copy -> empty
            | Add (a_2, b_2) ->
                (map (fun a_2 -> Add (a_2, b_2)) (char a_2)) <+>
                  (map (fun b_2 -> Add (a_2, b_2)) (int b_2))
            | Find a_3 -> map (fun a_3 -> Find a_3) (char a_3)
            | Find_opt a_4 -> map (fun a_4 -> Find_opt a_4) (char a_4)
            | Find_all a_5 -> map (fun a_5 -> Find_all a_5) (char a_5)
            | Mem a_6 -> map (fun a_6 -> Mem a_6) (char a_6)
            | Remove a_7 -> map (fun a_7 -> Remove a_7) (char a_7)
            | Replace (a_8, b_3) ->
                (map (fun a_8 -> Replace (a_8, b_3)) (char a_8)) <+>
                  (map (fun b_3 -> Replace (a_8, b_3)) (int b_3))
            | Length -> empty
    let cleanup _ = ()
    let arb_cmd _ =
      let open QCheck in
        make ~print:show_cmd ~shrink:shrink_cmd
          (let open Gen in
             oneof
               [((pure (fun random -> fun size -> Create (random, size))) <*>
                   bool)
                  <*> small_signed_int;
               pure Clear;
               pure Reset;
               pure Copy;
               ((pure (fun a_2 -> fun b_2 -> Add (a_2, b_2))) <*> char) <*>
                 int;
               (pure (fun a_3 -> Find a_3)) <*> char;
               (pure (fun a_4 -> Find_opt a_4)) <*> char;
               (pure (fun a_5 -> Find_all a_5)) <*> char;
               (pure (fun a_6 -> Mem a_6)) <*> char;
               (pure (fun a_7 -> Remove a_7)) <*> char;
               ((pure (fun a_8 -> fun b_3 -> Replace (a_8, b_3))) <*> char)
                 <*> int;
               pure Length])
    let next_state cmd__003_ state__004_ =
      match cmd__003_ with
      | Create (random, size) ->
          let h__006_ =
            let open ModelElt in
              {
                contents =
                  (try []
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "hashtbl.mli";
                                    pos_lnum = 7;
                                    pos_bol = 318;
                                    pos_cnum = 343
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "hashtbl.mli";
                                    pos_lnum = 7;
                                    pos_bol = 318;
                                    pos_cnum = 345
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__004_ 0) h__006_
      | Clear ->
          let h_1__007_ = Model.get state__004_ 0 in
          let h_1__008_ =
            let open ModelElt in
              {
                contents =
                  (try []
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "hashtbl.mli";
                                    pos_lnum = 12;
                                    pos_bol = 486;
                                    pos_cnum = 511
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "hashtbl.mli";
                                    pos_lnum = 12;
                                    pos_bol = 486;
                                    pos_cnum = 513
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__004_ 1) h_1__008_
      | Reset ->
          let h_2__009_ = Model.get state__004_ 0 in
          let h_2__010_ =
            let open ModelElt in
              {
                contents =
                  (try []
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "hashtbl.mli";
                                    pos_lnum = 17;
                                    pos_bol = 655;
                                    pos_cnum = 680
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "hashtbl.mli";
                                    pos_lnum = 17;
                                    pos_bol = 655;
                                    pos_cnum = 682
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__004_ 1) h_2__010_
      | Copy ->
          let h1__011_ = Model.get state__004_ 0 in
          let h2__014_ =
            let open ModelElt in
              {
                contents =
                  (try h1__011_.contents
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "hashtbl.mli";
                                    pos_lnum = 21;
                                    pos_bol = 819;
                                    pos_cnum = 845
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "hashtbl.mli";
                                    pos_lnum = 21;
                                    pos_bol = 819;
                                    pos_cnum = 856
                                  }
                              })))
              }
          and h1__013_ = h1__011_ in
          Model.push (Model.push (Model.drop_n state__004_ 1) h1__013_)
            h2__014_
      | Add (a_2, b_2) ->
          let h_3__015_ = Model.get state__004_ 0 in
          let h_3__016_ =
            let open ModelElt in
              {
                contents =
                  (try (a_2, b_2) :: h_3__015_.contents
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "hashtbl.mli";
                                    pos_lnum = 26;
                                    pos_bol = 1020;
                                    pos_cnum = 1045
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "hashtbl.mli";
                                    pos_lnum = 26;
                                    pos_bol = 1020;
                                    pos_cnum = 1069
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__004_ 1) h_3__016_
      | Find a_3 ->
          let h_4__017_ = Model.get state__004_ 0 in
          let h_4__018_ = h_4__017_ in
          Model.push (Model.drop_n state__004_ 1) h_4__018_
      | Find_opt a_4 ->
          let h_5__019_ = Model.get state__004_ 0 in
          let h_5__020_ = h_5__019_ in
          Model.push (Model.drop_n state__004_ 1) h_5__020_
      | Find_all a_5 ->
          let h_6__021_ = Model.get state__004_ 0 in
          let h_6__022_ = h_6__021_ in
          Model.push (Model.drop_n state__004_ 1) h_6__022_
      | Mem a_6 ->
          let h_7__023_ = Model.get state__004_ 0 in
          let h_7__024_ = h_7__023_ in
          Model.push (Model.drop_n state__004_ 1) h_7__024_
      | Remove a_7 ->
          let h_8__025_ = Model.get state__004_ 0 in
          let h_8__026_ =
            let open ModelElt in
              {
                contents =
                  (try remove_first a_7 h_8__025_.contents
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "hashtbl.mli";
                                    pos_lnum = 56;
                                    pos_bol = 2643;
                                    pos_cnum = 2668
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "hashtbl.mli";
                                    pos_lnum = 56;
                                    pos_bol = 2643;
                                    pos_cnum = 2680
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__004_ 1) h_8__026_
      | Replace (a_8, b_3) ->
          let h_9__027_ = Model.get state__004_ 0 in
          let h_9__028_ =
            let open ModelElt in
              {
                contents =
                  (try (a_8, b_3) :: (remove_first a_8 h_9__027_.contents)
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "hashtbl.mli";
                                    pos_lnum = 61;
                                    pos_bol = 2890;
                                    pos_cnum = 2915
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "hashtbl.mli";
                                    pos_lnum = 61;
                                    pos_bol = 2890;
                                    pos_cnum = 2956
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__004_ 1) h_9__028_
      | Length ->
          let h_10__029_ = Model.get state__004_ 0 in
          let h_10__030_ = h_10__029_ in
          Model.push (Model.drop_n state__004_ 1) h_10__030_
    let precond cmd__062_ state__063_ =
      match cmd__062_ with
      | Create (random, size) -> true
      | Clear -> true
      | Reset -> true
      | Copy -> true
      | Add (a_2, b_2) -> true
      | Find a_3 -> true
      | Find_opt a_4 -> true
      | Find_all a_5 -> true
      | Mem a_6 -> true
      | Remove a_7 -> true
      | Replace (a_8, b_3) -> true
      | Length -> true
    let postcond _ _ _ = true
    let run cmd__064_ sut__065_ =
      match cmd__064_ with
      | Create (random, size) ->
          Res
            (sut,
              (let res__066_ = create ~random size in
               (SUT.push sut__065_ res__066_; res__066_)))
      | Clear ->
          Res
            (unit,
              (let h_1__067_ = SUT.pop sut__065_ in
               let res__068_ = clear h_1__067_ in
               (SUT.push sut__065_ h_1__067_; res__068_)))
      | Reset ->
          Res
            (unit,
              (let h_2__069_ = SUT.pop sut__065_ in
               let res__070_ = reset h_2__069_ in
               (SUT.push sut__065_ h_2__069_; res__070_)))
      | Copy ->
          Res
            (sut,
              (let h1__071_ = SUT.pop sut__065_ in
               let res__072_ = copy h1__071_ in
               (SUT.push sut__065_ h1__071_;
                SUT.push sut__065_ res__072_;
                res__072_)))
      | Add (a_2, b_2) ->
          Res
            (unit,
              (let h_3__073_ = SUT.pop sut__065_ in
               let res__074_ = add h_3__073_ a_2 b_2 in
               (SUT.push sut__065_ h_3__073_; res__074_)))
      | Find a_3 ->
          Res
            ((result int exn),
              (let h_4__075_ = SUT.pop sut__065_ in
               let res__076_ = protect (fun () -> find h_4__075_ a_3) () in
               (SUT.push sut__065_ h_4__075_; res__076_)))
      | Find_opt a_4 ->
          Res
            ((option int),
              (let h_5__077_ = SUT.pop sut__065_ in
               let res__078_ = find_opt h_5__077_ a_4 in
               (SUT.push sut__065_ h_5__077_; res__078_)))
      | Find_all a_5 ->
          Res
            ((list int),
              (let h_6__079_ = SUT.pop sut__065_ in
               let res__080_ = find_all h_6__079_ a_5 in
               (SUT.push sut__065_ h_6__079_; res__080_)))
      | Mem a_6 ->
          Res
            (bool,
              (let h_7__081_ = SUT.pop sut__065_ in
               let res__082_ = mem h_7__081_ a_6 in
               (SUT.push sut__065_ h_7__081_; res__082_)))
      | Remove a_7 ->
          Res
            (unit,
              (let h_8__083_ = SUT.pop sut__065_ in
               let res__084_ = remove h_8__083_ a_7 in
               (SUT.push sut__065_ h_8__083_; res__084_)))
      | Replace (a_8, b_3) ->
          Res
            (unit,
              (let h_9__085_ = SUT.pop sut__065_ in
               let res__086_ = replace h_9__085_ a_8 b_3 in
               (SUT.push sut__065_ h_9__085_; res__086_)))
      | Length ->
          Res
            (int,
              (let h_10__087_ = SUT.pop sut__065_ in
               let res__088_ = length h_10__087_ in
               (SUT.push sut__065_ h_10__087_; res__088_)))
  end
module STMTests = (Ortac_runtime.Make)(Spec)
let check_init_state () = ()
let ortac_show_cmd cmd__090_ state__091_ last__093_ res__092_ =
  let open Spec in
    let open STM in
      match (cmd__090_, res__092_) with
      | (Create (random, size), Res ((SUT, _), h)) ->
          let lhs = if last__093_ then "r" else SUT.get_name state__091_ 0
          and shift = 1 in
          Format.asprintf "let %s = %s %a %a" lhs "create"
            (Util.Pp.pp_bool true) random (Util.Pp.pp_int true) size
      | (Clear, Res ((Unit, _), _)) ->
          let lhs = if last__093_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s" lhs "clear"
            (SUT.get_name state__091_ (0 + shift))
      | (Reset, Res ((Unit, _), _)) ->
          let lhs = if last__093_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s" lhs "reset"
            (SUT.get_name state__091_ (0 + shift))
      | (Copy, Res ((SUT, _), h2)) ->
          let lhs = if last__093_ then "r" else SUT.get_name state__091_ 0
          and shift = 1 in
          Format.asprintf "let %s = %s %s" lhs "copy"
            (SUT.get_name state__091_ (0 + shift))
      | (Add (a_2, b_2), Res ((Unit, _), _)) ->
          let lhs = if last__093_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s %a %a" lhs "add"
            (SUT.get_name state__091_ (0 + shift)) (Util.Pp.pp_char true) a_2
            (Util.Pp.pp_int true) b_2
      | (Find a_3, Res ((Result (Int, Exn), _), _)) ->
          let lhs = if last__093_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = protect (fun () -> %s %s %a)" lhs "find"
            (SUT.get_name state__091_ (0 + shift)) (Util.Pp.pp_char true) a_3
      | (Find_opt a_4, Res ((Option (Int), _), _)) ->
          let lhs = if last__093_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s %a" lhs "find_opt"
            (SUT.get_name state__091_ (0 + shift)) (Util.Pp.pp_char true) a_4
      | (Find_all a_5, Res ((List (Int), _), _)) ->
          let lhs = if last__093_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s %a" lhs "find_all"
            (SUT.get_name state__091_ (0 + shift)) (Util.Pp.pp_char true) a_5
      | (Mem a_6, Res ((Bool, _), _)) ->
          let lhs = if last__093_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s %a" lhs "mem"
            (SUT.get_name state__091_ (0 + shift)) (Util.Pp.pp_char true) a_6
      | (Remove a_7, Res ((Unit, _), _)) ->
          let lhs = if last__093_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s %a" lhs "remove"
            (SUT.get_name state__091_ (0 + shift)) (Util.Pp.pp_char true) a_7
      | (Replace (a_8, b_3), Res ((Unit, _), _)) ->
          let lhs = if last__093_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s %a %a" lhs "replace"
            (SUT.get_name state__091_ (0 + shift)) (Util.Pp.pp_char true) a_8
            (Util.Pp.pp_int true) b_3
      | (Length, Res ((Int, _), _)) ->
          let lhs = if last__093_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s" lhs "length"
            (SUT.get_name state__091_ (0 + shift))
      | _ -> assert false
let ortac_postcond cmd__031_ state__032_ res__033_ =
  let open Spec in
    let open STM in
      let new_state__034_ = lazy (next_state cmd__031_ state__032_) in
      match (cmd__031_, res__033_) with
      | (Create (random, size), Res ((SUT, _), h)) -> None
      | (Clear, Res ((Unit, _), _)) -> None
      | (Reset, Res ((Unit, _), _)) -> None
      | (Copy, Res ((SUT, _), h2)) -> None
      | (Add (a_2, b_2), Res ((Unit, _), _)) -> None
      | (Find a_3, Res ((Result (Int, Exn), _), b_4)) ->
          (match b_4 with
           | Ok b_4 ->
               if
                 let h_old__039_ = Model.get state__032_ 0
                 and h_new__040_ =
                   lazy (Model.get (Lazy.force new_state__034_) 0) in
                 (try
                    Ortac_runtime.Gospelstdlib.List.mem (a_3, b_4)
                      (Lazy.force h_new__040_).contents
                  with
                  | e ->
                      raise
                        (Ortac_runtime.Partial_function
                           (e,
                             {
                               Ortac_runtime.start =
                                 {
                                   pos_fname = "hashtbl.mli";
                                   pos_lnum = 32;
                                   pos_bol = 1360;
                                   pos_cnum = 1372
                                 };
                               Ortac_runtime.stop =
                                 {
                                   pos_fname = "hashtbl.mli";
                                   pos_lnum = 32;
                                   pos_bol = 1360;
                                   pos_cnum = 1398
                                 }
                             })))
               then None
               else
                 Some
                   (Ortac_runtime.report "Hashtbl" "create ~random:false 16"
                      (Ortac_runtime.Protected_value
                         (Res (Ortac_runtime.dummy, ()))) "find"
                      [("List.mem (a, b) h.contents",
                         {
                           Ortac_runtime.start =
                             {
                               pos_fname = "hashtbl.mli";
                               pos_lnum = 32;
                               pos_bol = 1360;
                               pos_cnum = 1372
                             };
                           Ortac_runtime.stop =
                             {
                               pos_fname = "hashtbl.mli";
                               pos_lnum = 32;
                               pos_bol = 1360;
                               pos_cnum = 1398
                             }
                         })])
           | Error (Not_found) ->
               if
                 let h_old__043_ = Model.get state__032_ 0
                 and h_new__044_ =
                   lazy (Model.get (Lazy.force new_state__034_) 0) in
                 (try
                    not
                      (Ortac_runtime.Gospelstdlib.List.mem a_3
                         (Ortac_runtime.Gospelstdlib.List.map
                            Ortac_runtime.Gospelstdlib.fst
                            (Lazy.force h_new__044_).contents))
                  with
                  | e ->
                      raise
                        (Ortac_runtime.Partial_function
                           (e,
                             {
                               Ortac_runtime.start =
                                 {
                                   pos_fname = "hashtbl.mli";
                                   pos_lnum = 31;
                                   pos_bol = 1293;
                                   pos_cnum = 1317
                                 };
                               Ortac_runtime.stop =
                                 {
                                   pos_fname = "hashtbl.mli";
                                   pos_lnum = 31;
                                   pos_bol = 1293;
                                   pos_cnum = 1359
                                 }
                             })))
               then None
               else
                 Some
                   (Ortac_runtime.report "Hashtbl" "create ~random:false 16"
                      (Ortac_runtime.Exception "Not_found") "find"
                      [("not (List.mem a (List.map fst h.contents))",
                         {
                           Ortac_runtime.start =
                             {
                               pos_fname = "hashtbl.mli";
                               pos_lnum = 31;
                               pos_bol = 1293;
                               pos_cnum = 1317
                             };
                           Ortac_runtime.stop =
                             {
                               pos_fname = "hashtbl.mli";
                               pos_lnum = 31;
                               pos_bol = 1293;
                               pos_cnum = 1359
                             }
                         })])
           | _ -> None)
      | (Find_opt a_4, Res ((Option (Int), _), o)) ->
          if
            let h_old__046_ = Model.get state__032_ 0
            and h_new__047_ = lazy (Model.get (Lazy.force new_state__034_) 0) in
            (try
               (match o with
                | None ->
                    if
                      not
                        (Ortac_runtime.Gospelstdlib.List.mem a_4
                           (Ortac_runtime.Gospelstdlib.List.map
                              Ortac_runtime.Gospelstdlib.fst
                              (Lazy.force h_new__047_).contents))
                    then true
                    else false
                | Some b_5 ->
                    if
                      Ortac_runtime.Gospelstdlib.List.mem (a_4, b_5)
                        (Lazy.force h_new__047_).contents
                    then true
                    else false)
                 = true
             with
             | e ->
                 raise
                   (Ortac_runtime.Partial_function
                      (e,
                        {
                          Ortac_runtime.start =
                            {
                              pos_fname = "hashtbl.mli";
                              pos_lnum = 36;
                              pos_bol = 1559;
                              pos_cnum = 1571
                            };
                          Ortac_runtime.stop =
                            {
                              pos_fname = "hashtbl.mli";
                              pos_lnum = 38;
                              pos_bol = 1643;
                              pos_cnum = 1687
                            }
                        })))
          then None
          else
            Some
              (Ortac_runtime.report "Hashtbl" "create ~random:false 16"
                 (Ortac_runtime.Value (Res (Ortac_runtime.dummy, ())))
                 "find_opt"
                 [("match o with\n      | None -> not (List.mem a (List.map fst h.contents))\n      | Some b -> List.mem (a, b) h.contents",
                    {
                      Ortac_runtime.start =
                        {
                          pos_fname = "hashtbl.mli";
                          pos_lnum = 36;
                          pos_bol = 1559;
                          pos_cnum = 1571
                        };
                      Ortac_runtime.stop =
                        {
                          pos_fname = "hashtbl.mli";
                          pos_lnum = 38;
                          pos_bol = 1643;
                          pos_cnum = 1687
                        }
                    })])
      | (Find_all a_5, Res ((List (Int), _), bs)) ->
          if
            let h_old__049_ = Model.get state__032_ 0
            and h_new__050_ = lazy (Model.get (Lazy.force new_state__034_) 0) in
            (try
               (Ortac_runtime.Gospelstdlib.List.to_seq bs) =
                 (Ortac_runtime.Gospelstdlib.Sequence.filter_map
                    (fun (x_1, y) -> if x_1 = a_5 then Some y else None)
                    (Ortac_runtime.Gospelstdlib.List.to_seq
                       (Lazy.force h_new__050_).contents))
             with
             | e ->
                 raise
                   (Ortac_runtime.Partial_function
                      (e,
                        {
                          Ortac_runtime.start =
                            {
                              pos_fname = "hashtbl.mli";
                              pos_lnum = 42;
                              pos_bol = 1853;
                              pos_cnum = 1865
                            };
                          Ortac_runtime.stop =
                            {
                              pos_fname = "hashtbl.mli";
                              pos_lnum = 42;
                              pos_bol = 1853;
                              pos_cnum = 1947
                            }
                        })))
          then None
          else
            Some
              (Ortac_runtime.report "Hashtbl" "create ~random:false 16"
                 (Ortac_runtime.Value (Res (Ortac_runtime.dummy, ())))
                 "find_all"
                 [("bs = Sequence.filter_map (fun (x, y) -> if x = a then Some y else None) h.contents",
                    {
                      Ortac_runtime.start =
                        {
                          pos_fname = "hashtbl.mli";
                          pos_lnum = 42;
                          pos_bol = 1853;
                          pos_cnum = 1865
                        };
                      Ortac_runtime.stop =
                        {
                          pos_fname = "hashtbl.mli";
                          pos_lnum = 42;
                          pos_bol = 1853;
                          pos_cnum = 1947
                        }
                    })])
      | (Mem a_6, Res ((Bool, _), b_6)) ->
          if
            let h_old__052_ = Model.get state__032_ 0
            and h_new__053_ = lazy (Model.get (Lazy.force new_state__034_) 0) in
            (try
               (b_6 = true) =
                 (Ortac_runtime.Gospelstdlib.List.mem a_6
                    (Ortac_runtime.Gospelstdlib.List.map
                       Ortac_runtime.Gospelstdlib.fst
                       (Lazy.force h_new__053_).contents))
             with
             | e ->
                 raise
                   (Ortac_runtime.Partial_function
                      (e,
                        {
                          Ortac_runtime.start =
                            {
                              pos_fname = "hashtbl.mli";
                              pos_lnum = 46;
                              pos_bol = 2149;
                              pos_cnum = 2161
                            };
                          Ortac_runtime.stop =
                            {
                              pos_fname = "hashtbl.mli";
                              pos_lnum = 46;
                              pos_bol = 2149;
                              pos_cnum = 2201
                            }
                        })))
          then None
          else
            Some
              (Ortac_runtime.report "Hashtbl" "create ~random:false 16"
                 (Ortac_runtime.Value (Res (Ortac_runtime.dummy, ()))) "mem"
                 [("b = List.mem a (List.map fst h.contents)",
                    {
                      Ortac_runtime.start =
                        {
                          pos_fname = "hashtbl.mli";
                          pos_lnum = 46;
                          pos_bol = 2149;
                          pos_cnum = 2161
                        };
                      Ortac_runtime.stop =
                        {
                          pos_fname = "hashtbl.mli";
                          pos_lnum = 46;
                          pos_bol = 2149;
                          pos_cnum = 2201
                        }
                    })])
      | (Remove a_7, Res ((Unit, _), _)) -> None
      | (Replace (a_8, b_3), Res ((Unit, _), _)) -> None
      | (Length, Res ((Int, _), i)) ->
          if
            let h_old__059_ = Model.get state__032_ 0
            and h_new__060_ = lazy (Model.get (Lazy.force new_state__034_) 0) in
            (try
               (Ortac_runtime.Gospelstdlib.integer_of_int i) =
                 (Ortac_runtime.Gospelstdlib.List.length
                    (Lazy.force h_new__060_).contents)
             with
             | e ->
                 raise
                   (Ortac_runtime.Partial_function
                      (e,
                        {
                          Ortac_runtime.start =
                            {
                              pos_fname = "hashtbl.mli";
                              pos_lnum = 76;
                              pos_bol = 3727;
                              pos_cnum = 3739
                            };
                          Ortac_runtime.stop =
                            {
                              pos_fname = "hashtbl.mli";
                              pos_lnum = 76;
                              pos_bol = 3727;
                              pos_cnum = 3765
                            }
                        })))
          then None
          else
            Some
              (Ortac_runtime.report "Hashtbl" "create ~random:false 16"
                 (Ortac_runtime.Value
                    (Res
                       (integer,
                         (let h_old__057_ = Model.get state__032_ 0
                          and h_new__058_ =
                            lazy (Model.get (Lazy.force new_state__034_) 0) in
                          try
                            Ortac_runtime.Gospelstdlib.List.length
                              (Lazy.force h_new__058_).contents
                          with
                          | e ->
                              raise
                                (Ortac_runtime.Partial_function
                                   (e,
                                     {
                                       Ortac_runtime.start =
                                         {
                                           pos_fname = "hashtbl.mli";
                                           pos_lnum = 76;
                                           pos_bol = 3727;
                                           pos_cnum = 3743
                                         };
                                       Ortac_runtime.stop =
                                         {
                                           pos_fname = "hashtbl.mli";
                                           pos_lnum = 76;
                                           pos_bol = 3727;
                                           pos_cnum = 3765
                                         }
                                     })))))) "length"
                 [("i = List.length h.contents",
                    {
                      Ortac_runtime.start =
                        {
                          pos_fname = "hashtbl.mli";
                          pos_lnum = 76;
                          pos_bol = 3727;
                          pos_cnum = 3739
                        };
                      Ortac_runtime.stop =
                        {
                          pos_fname = "hashtbl.mli";
                          pos_lnum = 76;
                          pos_bol = 3727;
                          pos_cnum = 3765
                        }
                    })])
      | _ -> None
let _ =
  QCheck_base_runner.run_tests_main
    (let count = 1000 in
     [STMTests.agree_test ~count ~name:"Hashtbl STM tests" 1 check_init_state
        ortac_show_cmd ortac_postcond])
