(* This file is generated by ortac qcheck-stm,
   edit how you run the tool instead *)
[@@@ocaml.warning "-26-27-69-32"]
open Tuples
module Ortac_runtime = Ortac_runtime_qcheck_stm
module Spec =
  struct
    open STM
    type _ ty +=  
      | Integer: Ortac_runtime.integer ty 
    let integer = (Integer, Ortac_runtime.string_of_integer)
    type _ ty +=  
      | Tup2: 'a1 ty * 'a2 ty -> ('a1 * 'a2) ty 
      | Tup3: 'a1 ty * 'a2 ty * 'a3 ty -> ('a1 * 'a2 * 'a3) ty 
    let tup2 spec1 spec2 =
      let (ty1, show1) = spec1
      and (ty2, show2) = spec2 in
      ((Tup2 (ty1, ty2)),
        (Util.Pp.to_show
           (Util.Pp.pp_tuple2 (Util.Pp.of_show show1) (Util.Pp.of_show show2))))
    and tup3 spec1 spec2 spec3 =
      let (ty1, show1) = spec1
      and (ty2, show2) = spec2
      and (ty3, show3) = spec3 in
      ((Tup3 (ty1, ty2, ty3)),
        (Util.Pp.to_show
           (Util.Pp.pp_tuple3 (Util.Pp.of_show show1) (Util.Pp.of_show show2)
              (Util.Pp.of_show show3))))
    type sut = (char, int) t
    type cmd =
      | Clear 
      | Add of (char * int) 
      | Add' of (bool * char * int) 
      | Add'' of (bool * (char * int)) 
      | Size_tup 
      | Size_tup' 
    let show_cmd cmd__001_ =
      match cmd__001_ with
      | Clear -> Format.asprintf "%s sut" "clear"
      | Add tup ->
          Format.asprintf "%s sut %a" "add"
            (Util.Pp.pp_tuple2 Util.Pp.pp_char Util.Pp.pp_int true) tup
      | Add' tup_1 ->
          Format.asprintf "%s sut %a" "add'"
            (Util.Pp.pp_tuple3 Util.Pp.pp_bool Util.Pp.pp_char Util.Pp.pp_int
               true) tup_1
      | Add'' tup_2 ->
          Format.asprintf "%s sut %a" "add''"
            (Util.Pp.pp_tuple2 Util.Pp.pp_bool
               (Util.Pp.pp_tuple2 Util.Pp.pp_char Util.Pp.pp_int) true) tup_2
      | Size_tup -> Format.asprintf "%s sut" "size_tup"
      | Size_tup' -> Format.asprintf "%s sut" "size_tup'"
    type nonrec state = {
      contents: (char, int) tuple2 list }
    let init_state =
      let () = () in
      {
        contents =
          (try []
           with
           | e ->
               raise
                 (Ortac_runtime.Partial_function
                    (e,
                      {
                        Ortac_runtime.start =
                          {
                            pos_fname = "tuples.mli";
                            pos_lnum = 6;
                            pos_bol = 251;
                            pos_cnum = 276
                          };
                        Ortac_runtime.stop =
                          {
                            pos_fname = "tuples.mli";
                            pos_lnum = 6;
                            pos_bol = 251;
                            pos_cnum = 278
                          }
                      })))
      }
    let init_sut () = create ()
    let cleanup _ = ()
    let arb_cmd _ =
      let open QCheck in
        make ~print:show_cmd
          (let open Gen in
             oneof
               [pure Clear;
               (pure (fun tup -> Add tup)) <*> (tup2 char int);
               (pure (fun tup_1 -> Add' tup_1)) <*> (tup3 bool char int);
               (pure (fun tup_2 -> Add'' tup_2)) <*>
                 (tup2 bool (tup2 char int));
               pure Size_tup;
               pure Size_tup'])
    let next_state cmd__002_ state__003_ =
      match cmd__002_ with
      | Clear ->
          {
            contents =
              ((try []
                with
                | e ->
                    raise
                      (Ortac_runtime.Partial_function
                         (e,
                           {
                             Ortac_runtime.start =
                               {
                                 pos_fname = "tuples.mli";
                                 pos_lnum = 11;
                                 pos_bol = 416;
                                 pos_cnum = 441
                               };
                             Ortac_runtime.stop =
                               {
                                 pos_fname = "tuples.mli";
                                 pos_lnum = 11;
                                 pos_bol = 416;
                                 pos_cnum = 443
                               }
                           }))))
          }
      | Add tup ->
          {
            contents =
              ((try
                  match tup with
                  | tuple2_1 (a_1, b_1) ->
                      (tuple2 (a_1, b_1)) :: state__003_.contents
                with
                | e ->
                    raise
                      (Ortac_runtime.Partial_function
                         (e,
                           {
                             Ortac_runtime.start =
                               {
                                 pos_fname = "tuples.mli";
                                 pos_lnum = 16;
                                 pos_bol = 594;
                                 pos_cnum = 619
                               };
                             Ortac_runtime.stop =
                               {
                                 pos_fname = "tuples.mli";
                                 pos_lnum = 16;
                                 pos_bol = 594;
                                 pos_cnum = 666
                               }
                           }))))
          }
      | Add' tup_1 ->
          {
            contents =
              ((try
                  match tup_1 with
                  | tuple3 (c, a_2, b_2) ->
                      if c = true
                      then (tuple2 (a_2, b_2)) :: state__003_.contents
                      else state__003_.contents
                with
                | e ->
                    raise
                      (Ortac_runtime.Partial_function
                         (e,
                           {
                             Ortac_runtime.start =
                               {
                                 pos_fname = "tuples.mli";
                                 pos_lnum = 21;
                                 pos_bol = 871;
                                 pos_cnum = 896
                               };
                             Ortac_runtime.stop =
                               {
                                 pos_fname = "tuples.mli";
                                 pos_lnum = 23;
                                 pos_bol = 965;
                                 pos_cnum = 992
                               }
                           }))))
          }
      | Add'' tup_2 ->
          {
            contents =
              ((try
                  match tup_2 with
                  | tuple2_1 (c_1, tuple2_1 (a_3, b_3)) ->
                      if c_1 = true
                      then (tuple2 (a_3, b_3)) :: state__003_.contents
                      else state__003_.contents
                with
                | e ->
                    raise
                      (Ortac_runtime.Partial_function
                         (e,
                           {
                             Ortac_runtime.start =
                               {
                                 pos_fname = "tuples.mli";
                                 pos_lnum = 28;
                                 pos_bol = 1156;
                                 pos_cnum = 1181
                               };
                             Ortac_runtime.stop =
                               {
                                 pos_fname = "tuples.mli";
                                 pos_lnum = 30;
                                 pos_bol = 1252;
                                 pos_cnum = 1279
                               }
                           }))))
          }
      | Size_tup -> state__003_
      | Size_tup' -> state__003_
    let precond cmd__008_ state__009_ =
      match cmd__008_ with
      | Clear -> true
      | Add tup -> true
      | Add' tup_1 -> true
      | Add'' tup_2 -> true
      | Size_tup -> true
      | Size_tup' -> true
    let postcond _ _ _ = true
    let run cmd__010_ sut__011_ =
      match cmd__010_ with
      | Clear -> Res (unit, (clear sut__011_))
      | Add tup -> Res (unit, (add sut__011_ tup))
      | Add' tup_1 -> Res (unit, (add' sut__011_ tup_1))
      | Add'' tup_2 -> Res (unit, (add'' sut__011_ tup_2))
      | Size_tup -> Res ((tup2 int int), (size_tup sut__011_))
      | Size_tup' -> Res ((tup3 int int int), (size_tup' sut__011_))
  end
module STMTests = (Ortac_runtime.Make)(Spec)
let check_init_state () = ()
let ortac_postcond cmd__004_ state__005_ res__006_ =
  let open Spec in
    let open STM in
      let new_state__007_ = lazy (next_state cmd__004_ state__005_) in
      match (cmd__004_, res__006_) with
      | (Clear, Res ((Unit, _), _)) -> None
      | (Add tup, Res ((Unit, _), _)) -> None
      | (Add' tup_1, Res ((Unit, _), _)) -> None
      | (Add'' tup_2, Res ((Unit, _), _)) -> None
      | (Size_tup, Res ((Tup2 (Int, Int), _), (x, y))) ->
          Ortac_runtime.append
            (if
               try
                 (Ortac_runtime.Gospelstdlib.integer_of_int x) =
                   (Ortac_runtime.Gospelstdlib.List.length
                      (Lazy.force new_state__007_).contents)
               with
               | e ->
                   raise
                     (Ortac_runtime.Partial_function
                        (e,
                          {
                            Ortac_runtime.start =
                              {
                                pos_fname = "tuples.mli";
                                pos_lnum = 34;
                                pos_bol = 1422;
                                pos_cnum = 1434
                              };
                            Ortac_runtime.stop =
                              {
                                pos_fname = "tuples.mli";
                                pos_lnum = 34;
                                pos_bol = 1422;
                                pos_cnum = 1460
                              }
                          }))
             then None
             else
               Some
                 (Ortac_runtime.report "Tuples" "create ()"
                    (Either.right (Res (Ortac_runtime.dummy, ()))) "size_tup"
                    [("x = List.length t.contents",
                       {
                         Ortac_runtime.start =
                           {
                             pos_fname = "tuples.mli";
                             pos_lnum = 34;
                             pos_bol = 1422;
                             pos_cnum = 1434
                           };
                         Ortac_runtime.stop =
                           {
                             pos_fname = "tuples.mli";
                             pos_lnum = 34;
                             pos_bol = 1422;
                             pos_cnum = 1460
                           }
                       })]))
            (if
               try
                 (Ortac_runtime.Gospelstdlib.integer_of_int y) =
                   (Ortac_runtime.Gospelstdlib.List.length
                      (Lazy.force new_state__007_).contents)
               with
               | e ->
                   raise
                     (Ortac_runtime.Partial_function
                        (e,
                          {
                            Ortac_runtime.start =
                              {
                                pos_fname = "tuples.mli";
                                pos_lnum = 35;
                                pos_bol = 1461;
                                pos_cnum = 1473
                              };
                            Ortac_runtime.stop =
                              {
                                pos_fname = "tuples.mli";
                                pos_lnum = 35;
                                pos_bol = 1461;
                                pos_cnum = 1499
                              }
                          }))
             then None
             else
               Some
                 (Ortac_runtime.report "Tuples" "create ()"
                    (Either.right (Res (Ortac_runtime.dummy, ()))) "size_tup"
                    [("y = List.length t.contents",
                       {
                         Ortac_runtime.start =
                           {
                             pos_fname = "tuples.mli";
                             pos_lnum = 35;
                             pos_bol = 1461;
                             pos_cnum = 1473
                           };
                         Ortac_runtime.stop =
                           {
                             pos_fname = "tuples.mli";
                             pos_lnum = 35;
                             pos_bol = 1461;
                             pos_cnum = 1499
                           }
                       })]))
      | (Size_tup', Res ((Tup3 (Int, Int, Int), _), (x_1, y_1, z))) ->
          Ortac_runtime.append
            (if
               try
                 (Ortac_runtime.Gospelstdlib.integer_of_int x_1) =
                   (Ortac_runtime.Gospelstdlib.List.length
                      (Lazy.force new_state__007_).contents)
               with
               | e ->
                   raise
                     (Ortac_runtime.Partial_function
                        (e,
                          {
                            Ortac_runtime.start =
                              {
                                pos_fname = "tuples.mli";
                                pos_lnum = 39;
                                pos_bol = 1664;
                                pos_cnum = 1676
                              };
                            Ortac_runtime.stop =
                              {
                                pos_fname = "tuples.mli";
                                pos_lnum = 39;
                                pos_bol = 1664;
                                pos_cnum = 1702
                              }
                          }))
             then None
             else
               Some
                 (Ortac_runtime.report "Tuples" "create ()"
                    (Either.right (Res (Ortac_runtime.dummy, ())))
                    "size_tup'"
                    [("x = List.length t.contents",
                       {
                         Ortac_runtime.start =
                           {
                             pos_fname = "tuples.mli";
                             pos_lnum = 39;
                             pos_bol = 1664;
                             pos_cnum = 1676
                           };
                         Ortac_runtime.stop =
                           {
                             pos_fname = "tuples.mli";
                             pos_lnum = 39;
                             pos_bol = 1664;
                             pos_cnum = 1702
                           }
                       })]))
            (Ortac_runtime.append
               (if
                  try
                    (Ortac_runtime.Gospelstdlib.integer_of_int y_1) =
                      (Ortac_runtime.Gospelstdlib.List.length
                         (Lazy.force new_state__007_).contents)
                  with
                  | e ->
                      raise
                        (Ortac_runtime.Partial_function
                           (e,
                             {
                               Ortac_runtime.start =
                                 {
                                   pos_fname = "tuples.mli";
                                   pos_lnum = 40;
                                   pos_bol = 1703;
                                   pos_cnum = 1715
                                 };
                               Ortac_runtime.stop =
                                 {
                                   pos_fname = "tuples.mli";
                                   pos_lnum = 40;
                                   pos_bol = 1703;
                                   pos_cnum = 1741
                                 }
                             }))
                then None
                else
                  Some
                    (Ortac_runtime.report "Tuples" "create ()"
                       (Either.right (Res (Ortac_runtime.dummy, ())))
                       "size_tup'"
                       [("y = List.length t.contents",
                          {
                            Ortac_runtime.start =
                              {
                                pos_fname = "tuples.mli";
                                pos_lnum = 40;
                                pos_bol = 1703;
                                pos_cnum = 1715
                              };
                            Ortac_runtime.stop =
                              {
                                pos_fname = "tuples.mli";
                                pos_lnum = 40;
                                pos_bol = 1703;
                                pos_cnum = 1741
                              }
                          })]))
               (if
                  try
                    (Ortac_runtime.Gospelstdlib.integer_of_int z) =
                      (Ortac_runtime.Gospelstdlib.List.length
                         (Lazy.force new_state__007_).contents)
                  with
                  | e ->
                      raise
                        (Ortac_runtime.Partial_function
                           (e,
                             {
                               Ortac_runtime.start =
                                 {
                                   pos_fname = "tuples.mli";
                                   pos_lnum = 41;
                                   pos_bol = 1742;
                                   pos_cnum = 1754
                                 };
                               Ortac_runtime.stop =
                                 {
                                   pos_fname = "tuples.mli";
                                   pos_lnum = 41;
                                   pos_bol = 1742;
                                   pos_cnum = 1780
                                 }
                             }))
                then None
                else
                  Some
                    (Ortac_runtime.report "Tuples" "create ()"
                       (Either.right (Res (Ortac_runtime.dummy, ())))
                       "size_tup'"
                       [("z = List.length t.contents",
                          {
                            Ortac_runtime.start =
                              {
                                pos_fname = "tuples.mli";
                                pos_lnum = 41;
                                pos_bol = 1742;
                                pos_cnum = 1754
                              };
                            Ortac_runtime.stop =
                              {
                                pos_fname = "tuples.mli";
                                pos_lnum = 41;
                                pos_bol = 1742;
                                pos_cnum = 1780
                              }
                          })])))
      | _ -> None
let _ =
  QCheck_base_runner.run_tests_main
    (let count = 1000 in
     [STMTests.agree_test ~count ~name:"Tuples STM tests" check_init_state
        ortac_postcond])
