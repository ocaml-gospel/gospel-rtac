(* This file is generated by ortac qcheck-stm,
   edit how you run the tool instead *)
[@@@ocaml.warning "-26-27-69-32-38"]
open Ghost_as_model
module Ortac_runtime = Ortac_runtime_qcheck_stm
type m =
  | A of Ortac_runtime.integer 
module SUT =
  (Ortac_runtime.SUT.Make)(struct type sut = t
                                  let init () = create () end)
module ModelElt =
  struct
    type nonrec elt = {
      m_1: m }
    let init =
      let () = () in
      {
        m_1 =
          (try A (Ortac_runtime.Gospelstdlib.integer_of_int 0)
           with
           | e ->
               raise
                 (Ortac_runtime.Partial_function
                    (e,
                      {
                        Ortac_runtime.start =
                          {
                            pos_fname = "ghost_as_model.mli";
                            pos_lnum = 8;
                            pos_bol = 343;
                            pos_cnum = 361
                          };
                        Ortac_runtime.stop =
                          {
                            pos_fname = "ghost_as_model.mli";
                            pos_lnum = 8;
                            pos_bol = 343;
                            pos_cnum = 362
                          }
                      })))
      }
  end
module Model = (Ortac_runtime.Model.Make)(ModelElt)
module Spec =
  struct
    open STM
    type _ ty +=  
      | Integer: Ortac_runtime.integer ty 
    let integer = (Integer, Ortac_runtime.string_of_integer)
    type _ ty +=  
      | SUT: SUT.elt ty 
    let sut = (SUT, (fun _ -> "<sut>"))
    type sut = SUT.t
    let init_sut = SUT.create 1
    type state = Model.t
    let init_state = Model.create 1 ()
    type cmd =
      | Create of unit 
      | Use 
    let show_cmd cmd__001_ =
      match cmd__001_ with
      | Create () ->
          Format.asprintf "%s %a" "create" (Util.Pp.pp_unit true) ()
      | Use -> Format.asprintf "%s <sut>" "use"
    let shrink_cmd cmd__002_ =
      let open QCheck in
        let open Shrink in
          let open Iter in
            match cmd__002_ with
            | Create () -> map (fun () -> Create ()) (unit ())
            | Use -> empty
    let cleanup _ = ()
    let arb_cmd _ =
      let open QCheck in
        make ~print:show_cmd ~shrink:shrink_cmd
          (let open Gen in
             oneof [(pure (fun () -> Create ())) <*> unit; pure Use])
    let next_state cmd__003_ state__004_ =
      match cmd__003_ with
      | Create () ->
          let t_1__006_ =
            let open ModelElt in
              {
                m_1 =
                  (try A (Ortac_runtime.Gospelstdlib.integer_of_int 0)
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "ghost_as_model.mli";
                                    pos_lnum = 8;
                                    pos_bol = 343;
                                    pos_cnum = 361
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "ghost_as_model.mli";
                                    pos_lnum = 8;
                                    pos_bol = 343;
                                    pos_cnum = 362
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__004_ 0) t_1__006_
      | Use ->
          let t_2__007_ = Model.get state__004_ 0 in
          let t_2__008_ =
            let open ModelElt in
              {
                m_1 =
                  (try
                     match t_2__007_.m_1 with
                     | A x -> A (Ortac_runtime.Gospelstdlib.succ x)
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "ghost_as_model.mli";
                                    pos_lnum = 13;
                                    pos_bol = 502;
                                    pos_cnum = 520
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "ghost_as_model.mli";
                                    pos_lnum = 13;
                                    pos_bol = 502;
                                    pos_cnum = 556
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__004_ 1) t_2__008_
    let precond cmd__014_ state__015_ =
      match cmd__014_ with | Create () -> true | Use -> true
    let postcond _ _ _ = true
    let run cmd__016_ sut__017_ =
      match cmd__016_ with
      | Create () ->
          Res
            (sut,
              (let res__018_ = create () in
               (SUT.push sut__017_ res__018_; res__018_)))
      | Use ->
          Res
            (unit,
              (let t_2__019_ = SUT.pop sut__017_ in
               let res__020_ = use t_2__019_ in
               (SUT.push sut__017_ t_2__019_; res__020_)))
  end
module STMTests = (Ortac_runtime.Make)(Spec)
let check_init_state () = ()
let ortac_show_cmd cmd__022_ state__023_ last__025_ res__024_ =
  let open Spec in
    let open STM in
      match (cmd__022_, res__024_) with
      | (Create (), Res ((SUT, _), t_1)) ->
          let lhs = if last__025_ then "r" else SUT.get_name state__023_ 0
          and shift = 1 in
          Format.asprintf "let %s = %s %a" lhs "create"
            (Util.Pp.pp_unit true) ()
      | (Use, Res ((Unit, _), _)) ->
          let lhs = if last__025_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s" lhs "use"
            (SUT.get_name state__023_ (0 + shift))
      | _ -> assert false
let ortac_postcond cmd__009_ state__010_ res__011_ =
  let open Spec in
    let open STM in
      let new_state__012_ = lazy (next_state cmd__009_ state__010_) in
      match (cmd__009_, res__011_) with
      | (Create (), Res ((SUT, _), t_1)) -> None
      | (Use, Res ((Unit, _), _)) -> None
      | _ -> None
let _ =
  QCheck_base_runner.run_tests_main
    (let count = 1000 in
     [STMTests.agree_test ~count ~name:"Ghost_as_model STM tests" 1
        check_init_state ortac_show_cmd ortac_postcond])
