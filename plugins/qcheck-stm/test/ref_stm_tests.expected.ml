(* This file is generated by ortac qcheck-stm,
   edit how you run the tool instead *)
[@@@ocaml.warning "-26-27-69-32-38"]
open Ref
module Ortac_runtime = Ortac_runtime_qcheck_stm
module SUT =
  (Ortac_runtime.SUT.Make)(struct type sut = t
                                  let init () = make 42 end)
module ModelElt =
  struct
    type nonrec elt = {
      value: Ortac_runtime.integer }
    let init =
      let i = 42 in
      {
        value =
          (try Ortac_runtime.Gospelstdlib.integer_of_int i
           with
           | e ->
               raise
                 (Ortac_runtime.Partial_function
                    (e,
                      {
                        Ortac_runtime.start =
                          {
                            pos_fname = "ref.mli";
                            pos_lnum = 6;
                            pos_bol = 211;
                            pos_cnum = 233
                          };
                        Ortac_runtime.stop =
                          {
                            pos_fname = "ref.mli";
                            pos_lnum = 6;
                            pos_bol = 211;
                            pos_cnum = 234
                          }
                      })))
      }
  end
module Model = (Ortac_runtime.Model.Make)(ModelElt)
module Spec =
  struct
    open STM
    type _ ty +=  
      | Integer: Ortac_runtime.integer ty 
    let integer = (Integer, Ortac_runtime.string_of_integer)
    type _ ty +=  
      | SUT: SUT.elt ty 
    let sut = (SUT, (fun _ -> "<sut>"))
    type sut = SUT.t
    let init_sut = SUT.create 1
    type state = Model.t
    let init_state = Model.create 1 ()
    type cmd =
      | Make of int 
      | Get 
    let show_cmd cmd__001_ =
      match cmd__001_ with
      | Make i -> Format.asprintf "%s %a" "make" (Util.Pp.pp_int true) i
      | Get -> Format.asprintf "%s <sut>" "get"
    let shrink_cmd cmd__002_ =
      let open QCheck in
        let open Shrink in
          let open Iter in
            match cmd__002_ with
            | Make i -> map (fun i -> Make i) (int i)
            | Get -> empty
    let cleanup _ = ()
    let arb_cmd _ =
      let open QCheck in
        make ~print:show_cmd ~shrink:shrink_cmd
          (let open Gen in
             oneof [(pure (fun i -> Make i)) <*> small_signed_int; pure Get])
    let next_state cmd__003_ state__004_ =
      match cmd__003_ with
      | Make i ->
          let r__006_ =
            let open ModelElt in
              {
                value =
                  (try Ortac_runtime.Gospelstdlib.integer_of_int i
                   with
                   | e ->
                       raise
                         (Ortac_runtime.Partial_function
                            (e,
                              {
                                Ortac_runtime.start =
                                  {
                                    pos_fname = "ref.mli";
                                    pos_lnum = 6;
                                    pos_bol = 211;
                                    pos_cnum = 233
                                  };
                                Ortac_runtime.stop =
                                  {
                                    pos_fname = "ref.mli";
                                    pos_lnum = 6;
                                    pos_bol = 211;
                                    pos_cnum = 234
                                  }
                              })))
              } in
          Model.push (Model.drop_n state__004_ 0) r__006_
      | Get ->
          let r_1__007_ = Model.get state__004_ 0 in
          let r_1__008_ = r_1__007_ in
          Model.push (Model.drop_n state__004_ 1) r_1__008_
    let precond cmd__020_ state__021_ =
      match cmd__020_ with | Make i -> true | Get -> true
    let postcond _ _ _ = true
    let run cmd__022_ sut__023_ =
      match cmd__022_ with
      | Make i ->
          Res
            (sut,
              (let res__024_ = make i in
               (SUT.push sut__023_ res__024_; res__024_)))
      | Get ->
          Res
            (int,
              (let r_1__025_ = SUT.pop sut__023_ in
               let res__026_ = get r_1__025_ in
               (SUT.push sut__023_ r_1__025_; res__026_)))
  end
module STMTests = (Ortac_runtime.Make)(Spec)
let check_init_state () = ()
let ortac_show_cmd cmd__028_ state__029_ last__031_ res__030_ =
  let open Spec in
    let open STM in
      match (cmd__028_, res__030_) with
      | (Make i, Res ((SUT, _), r)) ->
          let lhs = if last__031_ then "r" else SUT.get_name state__029_ 0
          and shift = 1 in
          Format.asprintf "let %s = %s %a" lhs "make" (Util.Pp.pp_int true) i
      | (Get, Res ((Int, _), _)) ->
          let lhs = if last__031_ then "r" else "_"
          and shift = 0 in
          Format.asprintf "let %s = %s %s" lhs "get"
            (SUT.get_name state__029_ (0 + shift))
      | _ -> assert false
let ortac_postcond cmd__009_ state__010_ res__011_ =
  let open Spec in
    let open STM in
      let new_state__012_ = lazy (next_state cmd__009_ state__010_) in
      match (cmd__009_, res__011_) with
      | (Make i, Res ((SUT, _), r)) -> None
      | (Get, Res ((Int, _), i_1)) ->
          if
            let r_old__015_ = Model.get state__010_ 0
            and r_new__016_ = lazy (Model.get (Lazy.force new_state__012_) 0) in
            (try
               (Ortac_runtime.Gospelstdlib.integer_of_int i_1) =
                 (Lazy.force r_new__016_).value
             with
             | e ->
                 raise
                   (Ortac_runtime.Partial_function
                      (e,
                        {
                          Ortac_runtime.start =
                            {
                              pos_fname = "ref.mli";
                              pos_lnum = 11;
                              pos_bol = 346;
                              pos_cnum = 358
                            };
                          Ortac_runtime.stop =
                            {
                              pos_fname = "ref.mli";
                              pos_lnum = 11;
                              pos_bol = 346;
                              pos_cnum = 369
                            }
                        })))
          then None
          else
            Some
              (Ortac_runtime.report "Ref" "make 42"
                 (Ortac_runtime.Value
                    (Res
                       (integer,
                         (let r_old__013_ = Model.get state__010_ 0
                          and r_new__014_ =
                            lazy (Model.get (Lazy.force new_state__012_) 0) in
                          try (Lazy.force r_new__014_).value
                          with
                          | e ->
                              raise
                                (Ortac_runtime.Partial_function
                                   (e,
                                     {
                                       Ortac_runtime.start =
                                         {
                                           pos_fname = "ref.mli";
                                           pos_lnum = 11;
                                           pos_bol = 346;
                                           pos_cnum = 362
                                         };
                                       Ortac_runtime.stop =
                                         {
                                           pos_fname = "ref.mli";
                                           pos_lnum = 11;
                                           pos_bol = 346;
                                           pos_cnum = 369
                                         }
                                     })))))) "get"
                 [("i = r.value",
                    {
                      Ortac_runtime.start =
                        {
                          pos_fname = "ref.mli";
                          pos_lnum = 11;
                          pos_bol = 346;
                          pos_cnum = 358
                        };
                      Ortac_runtime.stop =
                        {
                          pos_fname = "ref.mli";
                          pos_lnum = 11;
                          pos_bol = 346;
                          pos_cnum = 369
                        }
                    })])
      | _ -> None
let _ =
  QCheck_base_runner.run_tests_main
    (let count = 1000 in
     [STMTests.agree_test ~count ~name:"Ref STM tests" 1 check_init_state
        ortac_show_cmd ortac_postcond])
